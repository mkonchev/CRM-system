from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Car(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number=None, model=None, vin=None, owner_id=None):  # noqa: E501
        """Car - a model defined in OpenAPI

        :param number: The number of this Car.  # noqa: E501
        :type number: str
        :param model: The model of this Car.  # noqa: E501
        :type model: str
        :param vin: The vin of this Car.  # noqa: E501
        :type vin: str
        :param owner_id: The owner_id of this Car.  # noqa: E501
        :type owner_id: int
        """
        self.openapi_types = {
            'number': str,
            'model': str,
            'vin': str,
            'owner_id': int
        }

        self.attribute_map = {
            'number': 'number',
            'model': 'model',
            'vin': 'vin',
            'owner_id': 'owner_id'
        }

        self._number = number
        self._model = model
        self._vin = vin
        self._owner_id = owner_id

    @classmethod
    def from_dict(cls, dikt) -> 'Car':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Car of this Car.  # noqa: E501
        :rtype: Car
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number(self) -> str:
        """Gets the number of this Car.


        :return: The number of this Car.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number: str):
        """Sets the number of this Car.


        :param number: The number of this Car.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def model(self) -> str:
        """Gets the model of this Car.


        :return: The model of this Car.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this Car.


        :param model: The model of this Car.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def vin(self) -> str:
        """Gets the vin of this Car.


        :return: The vin of this Car.
        :rtype: str
        """
        return self._vin

    @vin.setter
    def vin(self, vin: str):
        """Sets the vin of this Car.


        :param vin: The vin of this Car.
        :type vin: str
        """
        if vin is None:
            raise ValueError("Invalid value for `vin`, must not be `None`")  # noqa: E501

        self._vin = vin

    @property
    def owner_id(self) -> int:
        """Gets the owner_id of this Car.


        :return: The owner_id of this Car.
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id: int):
        """Sets the owner_id of this Car.


        :param owner_id: The owner_id of this Car.
        :type owner_id: int
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id
