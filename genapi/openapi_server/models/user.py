from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name=None, second_name=None, phone_number=None, email=None, tg_login=None, role=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param first_name: The first_name of this User.  # noqa: E501
        :type first_name: str
        :param second_name: The second_name of this User.  # noqa: E501
        :type second_name: str
        :param phone_number: The phone_number of this User.  # noqa: E501
        :type phone_number: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param tg_login: The tg_login of this User.  # noqa: E501
        :type tg_login: str
        :param role: The role of this User.  # noqa: E501
        :type role: str
        """
        self.openapi_types = {
            'first_name': str,
            'second_name': str,
            'phone_number': str,
            'email': str,
            'tg_login': str,
            'role': str
        }

        self.attribute_map = {
            'first_name': 'first_name',
            'second_name': 'second_name',
            'phone_number': 'phone_number',
            'email': 'email',
            'tg_login': 'tg_login',
            'role': 'role'
        }

        self._first_name = first_name
        self._second_name = second_name
        self._phone_number = phone_number
        self._email = email
        self._tg_login = tg_login
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self) -> str:
        """Gets the first_name of this User.


        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def second_name(self) -> str:
        """Gets the second_name of this User.


        :return: The second_name of this User.
        :rtype: str
        """
        return self._second_name

    @second_name.setter
    def second_name(self, second_name: str):
        """Sets the second_name of this User.


        :param second_name: The second_name of this User.
        :type second_name: str
        """
        if second_name is None:
            raise ValueError("Invalid value for `second_name`, must not be `None`")  # noqa: E501

        self._second_name = second_name

    @property
    def phone_number(self) -> str:
        """Gets the phone_number of this User.


        :return: The phone_number of this User.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number: str):
        """Sets the phone_number of this User.


        :param phone_number: The phone_number of this User.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def tg_login(self) -> str:
        """Gets the tg_login of this User.


        :return: The tg_login of this User.
        :rtype: str
        """
        return self._tg_login

    @tg_login.setter
    def tg_login(self, tg_login: str):
        """Sets the tg_login of this User.


        :param tg_login: The tg_login of this User.
        :type tg_login: str
        """

        self._tg_login = tg_login

    @property
    def role(self) -> str:
        """Gets the role of this User.

        Role in system  # noqa: E501

        :return: The role of this User.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this User.

        Role in system  # noqa: E501

        :param role: The role of this User.
        :type role: str
        """
        allowed_values = ["admin", "worker", "user"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
